#include <vector>
#include <limits.h>

using namespace std;

//O(N)
int GetSmallestDistanceUnvisitedNode(vector<bool> &visited, vector<int> &distances)
{
    int minDistance = INT_MAX;
    int minNode = -1;
    for (int i = 0; i < distances.size(); i++)
    {
        if (visited[i] == false)
        {
            if (distances[i] <= minDistance)
            {
                minDistance = distances[i];
                minNode = i;
            }
        }
    }
    return minNode;
}

vector<int> dijkstrasAlgorithm(int start, vector<vector<vector<int>>> edges)
{
    // Write your code here;
    int numNodes = edges.size();
    int numVisited = 0;
    vector<bool> visited(numNodes, false);
    vector<int> distances(numNodes, INT_MAX);

    distances[start] = 0;
    while (numVisited < numNodes)
    {
        //Get the closed unvisited node from our start node.
        int node = GetSmallestDistanceUnvisitedNode(visited, distances);

        //Check all the edges of this node and see if we can update a new
        //Distance to the nodes.
        if (distances[node] != INT_MAX)
        {
            for (auto edge : edges[node])
            {
                int nextNode = edge[0];
                int distanceToNext = edge[1];
                if (distances[nextNode] > distances[node] + distanceToNext)
                {
                    distances[nextNode] = distances[node] + distanceToNext;
                }
            }
        }
        visited[node] = true;
        numVisited++;
    }

    for (int i = 0; i < distances.size(); i++)
    {
        distances[i] = distances[i] == INT_MAX ? -1 : distances[i];
    }

    return distances;
}

int main()
{
    vector<vector<vector<int>>> edges =
        {"11000000000000000000000000000000000000000000000000",
 "01100000000000000000000000000000000000000000000000",
 "00110000000000000000000000000000000000000000000000",
 "00011000000000000000000000000000000000000000000000",
 "00001100000000000000000000000000000000000000000000",
 "00000110000000000000000000000000000000000000000000",
 "00000011000000000000000000000000000000000000000000",
 "00000001100000000000000000000000000000000000000000",
 "00000000110000000000000000000000000000000000000000",
 "00000000011000000000000000000000000000000000000000",
 "00000000001100000000000000000000000000000000000000",
 "00000000000110000000000000000000000000000000000000",
 "00000000000011000000000000000000000000000000000000",
 "00000000000001100000000000000000000000000000000000",
 "00000000000000110000000000000000000000000000000000",
 "00000000000000011000000000000000000000000000000000",
 "00000000000000001100000000000000000000000000000000",
 "00000000000000000110000000000000000000000000000000",
 "00000000000000000011000000000000000000000000000000",
 "00000000000000000001100000000000000000000000000000",
 "00000000000000000000110000000000000000000000000000",
 "00000000000000000000011000000000000000000000000000",
 "00000000000000000000001100000000000000000000000000",
 "00000000000000000000000110000000000000000000000000",
 "00000000000000000000000011000000000000000000000000",
 "00000000000000000000000001100000000000000000000000",
 "00000000000000000000000000110000000000000000000000",
 "00000000000000000000000000011000000000000000000000",
 "00000000000000000000000000001100000000000000000000",
 "00000000000000000000000000000110000000000000000000",
 "00000000000000000000000000000011000000000000000000",
 "00000000000000000000000000000001100000000000000000",
 "00000000000000000000000000000000110000000000000000",
 "00000000000000000000000000000000011000000000000000",
 "00000000000000000000000000000000001100000000000000",
 "00000000000000000000000000000000000110000000000000",
 "00000000000000000000000000000000000011000000000000",
 "00000000000000000000000000000000000001100000000000",
 "00000000000000000000000000000000000000110000000000",
 "00000000000000000000000000000000000000011000000000",
 "00000000000000000000000000000000000000001100000000",
 "00000000000000000000000000000000000000000110000000",
 "00000000000000000000000000000000000000000011000000",
 "00000000000000000000000000000000000000000001100000",
 "00000000000000000000000000000000000000000000110000",
 "00000000000000000000000000000000000000000000011000",
 "00000000000000000000000000000000000000000000001100",
 "00000000000000000000000000000000000000000000000110",
 "00000000000000000000000000000000000000000000000011",
 "10000000000000000000000000000000000000000000000001"};
    dijkstrasAlgorithm(0, edges);

    return 0;
}